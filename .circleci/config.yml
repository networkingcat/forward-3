version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Delete files from bucket
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            # Delete front end stack
            aws cloudformation delete-stack --stack-name udacity-frontend-thomas-forward-${CIRCLE_WORKFLOW_ID}
            # Delete back end stack
            aws cloudformation delete-stack --stack-name udacity-backend-thomas-forward-${CIRCLE_WORKFLOW_ID}


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail          
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token:${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID})
            echo ${SUCCESS}
            SUCCESS="1"
            if(( SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    resource_class: small    
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    resource_class: small      
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frond end test
          command: |
             cd frontend
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    resource_class: small      
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    resource_class: small      
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    resource_class: small      
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan          
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    resource_class: small      
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-backend-thomas-forward-${CIRCLE_WORKFLOW_ID} \
              --stack-name udacity-backend-thomas-forward-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --region eu-central-1

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-fronend-thomas-forward-${CIRCLE_WORKFLOW_ID} \
              --stack-name udacity-frontend-thomas-forward-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --region eu-central-1
      - run:
          name: Add url to memststash
          command: |
            WEBSITEURL=$(aws cloudformation describe-stacks \
              --region eu-central-1 \
              --stack-name udacity-frontend-thomas-forward-${CIRCLE_WORKFLOW_ID} \
              --query 'Stacks[0].Outputs[?'OutputKey'].OutputValue' \
              --output text)
              
            echo ${WEBSITEURL}
            
            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID}" \
            --request PUT --data "${WEBSITEURL}" https://api.memstash.io/values/websiteurl             
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks \
              --region eu-central-1 \
              --stack-name udacity-backend-thomas-forward-${CIRCLE_WORKFLOW_ID} \
              --query 'Stacks[0].Outputs[?'OutputKey'].OutputValue' \
              --output text)
              
            echo ${BACKEND_IP}
            
            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID}" \
            --request PUT --data "${BACKEND_IP}" https://api.memstash.io/values/backend_ip
   
      - destroy-environment 
      # IP is saved in memstash
      #- persist_to_workspace:
      #    root: ~/
      #    paths:
      #      - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: cytopia/ansible:latest
    resource_class: small      
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c3:3f:75:40:b2:41:b3:d3:eb:4b:73:a1:de:88:82:8c"
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache openssh-client
            apk add --no-cache rsync
            apk add --no-cache --update ansible
              
      - run:
          name: Configure server
          command: |
            BACKEND_IP=$(curl -H "token:${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend_ip)
            cd .circleci/ansible/
            export ANSIBLE_HOST_KEY_CHECKING=False
            echo ${BACKEND_IP} >> ./inventory.txt
            ansible-playbook -i ./inventory.txt configure-server.yml
      - destroy-environment 
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    resource_class: small      
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install      
      - run:
          name: Run migrations
                      #print env to debug connection error 
          command: |
            printenv >> ./backend/.env
            cd backend
            npm run migrations > migration_status.txt
            cat  migration_status.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully" migration_status.txt
            then
              curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "1" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID}
              echo "Databe migrated"
            else
              curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "0" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID}
              echo "There was no database migration"
            fi
      - destroy-environment
      - revert-migrations      
# Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    resource_class: small      
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
            
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token:${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend_ip)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            printenv >> ./frontend/.env            
            cd frontend
            npm install
            npm run build

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            aws s3 cp dist/ s3://udapeople-a4583fb5-c06e-4a23-a4c6-2c3e5ef905e4 --recursive
      #aws s3 cp dist/ s3://udapeople-"${CIRCLE_WORKFLOW_ID}"  --recursive
      - destroy-environment
      - revert-migrations      
# Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: cytopia/ansible:latest
    resource_class: small      
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c3:3f:75:40:b2:41:b3:d3:eb:4b:73:a1:de:88:82:8c"
      - restore_cache:
          keys: [backend-build]      
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache openssh-client
            apk add --no-cache rsync
            apk add --no-cache --update ansible           
      - run:
          name: Configure server
          command: |
            BACKEND_IP=$(curl -H "token:${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend_ip)
            cd .circleci/ansible/
            export ANSIBLE_HOST_KEY_CHECKING=False
            echo ${BACKEND_IP} >> ./inventory.txt
            ansible-playbook -i ./inventory.txt deploy-backend.yml
      - destroy-environment 
      - revert-migrations      
# Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # need image with aws cli and nodejs
      - image: circleci/node:13.8.0
    resource_class: small      
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token:${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend_ip)
            echo "${BACKEND_IP}"          
            if curl -s "http://${BACKEND_IP}:3030/api/status" | grep "ok"
            then
              echo "http://${BACKEND_IP}:3030/api/status"
              exit 0
            else
              echo "http://${BACKEND_IP}:3030/api/status"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s "http://udapeople-a4583fb5-c06e-4a23-a4c6-2c3e5ef905e4.s3-website.eu-central-1.amazonaws.com/" | grep -o "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment 
      - revert-migrations      
# Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli:latest
    resource_class: small      
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              yum install gzip tar python3-pip curl -y
              curl -sL https://rpm.nodesource.com/setup_10.x | bash -
              yum install nodejs npm -y
              npm install             
      - run:
          name: Update cloudfront distribution
          command: |
            WORKFLOWID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID}" --request PUT --data "$WORKFLOWID" https://api.memstash.io/values/workflowid

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udacity-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
              --region eu-central-1
      
      # Here's where you will add some code to rollback on failure  
      - destroy-environment 
      - revert-migrations   
      
  cleanup:
    docker:
      - image: amazon/aws-cli:latest
    resource_class: small      
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |

            OldWorkflowID=$(curl -H "token:${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/workflowid)
            #export OldWorkflowID="$OldWorkflowID"
            export OldWorkflowID="a4583fb5-c06e-4a23-a4c6-2c3e5ef905e4"
            echo Old Workflow Id: "${OldWorkflowID}"
            # export STACKS=($(aws cloudformation list-stacks --region eu-central-1 --query "StackSummaries[*]|[?starts_with(StackName,'uda')].StackName" --stack-status-filter CREATE_COMPLETE)) 
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID}




            if [[ "${CurrentWorkflowID}" != "${OldWorkflowID}" ]]
            then
              # Delete files from bucket
              aws s3 rm s3://udapeople-${OldWorkflowID}/ --recursive
              # Delete front end stack
              aws cloudformation delete-stack --stack-name udacity-frontend-thomas-forward-${OldWorkflowID}
              ## Delete back end stack
              aws cloudformation delete-stack --stack-name udacity-backend-thomas-forward-${OldWorkflowID}
            fi
            

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      #- deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #    filters:
      #      branches:
      #        only: [master]
      #- configure-infrastructure:
      #    requires: [deploy-infrastructure]
      #- run-migrations:
      #    requires: [configure-infrastructure]
      #- deploy-frontend:
      #    requires: [run-migrations]
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      - cleanup
      #- cleanup:
      #    requires: [cloudfront-update]
